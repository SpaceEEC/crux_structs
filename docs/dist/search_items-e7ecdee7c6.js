searchNodes=[{"doc":"Represents a Discord Application Object.","ref":"Crux.Structs.Application.html","title":"Crux.Structs.Application","type":"module"},{"doc":"Creates a Crux.Structs.Application.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Application.html#create/1","title":"Crux.Structs.Application.create/1","type":"function"},{"doc":"All available types that can be resolved into an application id.","ref":"Crux.Structs.Application.html#t:id_resolvable/0","title":"Crux.Structs.Application.id_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Application.html#t:t/0","title":"Crux.Structs.Application.t/0","type":"type"},{"doc":"","ref":"Crux.Structs.Application.html#t:team/0","title":"Crux.Structs.Application.team/0","type":"type"},{"doc":"Represents a Discord Attachment Object Height and width are only present for images.","ref":"Crux.Structs.Attachment.html","title":"Crux.Structs.Attachment","type":"module"},{"doc":"Creates a Crux.Structs.Attachment.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Attachment.html#create/1","title":"Crux.Structs.Attachment.create/1","type":"function"},{"doc":"","ref":"Crux.Structs.Attachment.html#t:t/0","title":"Crux.Structs.Attachment.t/0","type":"type"},{"doc":"Represents a Discord Audit Log Object.","ref":"Crux.Structs.AuditLog.html","title":"Crux.Structs.AuditLog","type":"module"},{"doc":"Creates a Crux.Structs.AuditLog.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.AuditLog.html#create/1","title":"Crux.Structs.AuditLog.create/1","type":"function"},{"doc":"All available types that can be resolved into an audit log id.","ref":"Crux.Structs.AuditLog.html#t:id_resolvable/0","title":"Crux.Structs.AuditLog.id_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.AuditLog.html#t:t/0","title":"Crux.Structs.AuditLog.t/0","type":"type"},{"doc":"Represents a Discord Audit Log Change Object.","ref":"Crux.Structs.AuditLogChange.html","title":"Crux.Structs.AuditLogChange","type":"module"},{"doc":"Creates a Crux.Structs.AuditLogChange.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.AuditLogChange.html#create/1","title":"Crux.Structs.AuditLogChange.create/1","type":"function"},{"doc":"Represents a value before or after a change.Note that the Role object returned by Discord in audit logs is a partial role that only contains id and name.","ref":"Crux.Structs.AuditLogChange.html#t:audit_log_change_value/0","title":"Crux.Structs.AuditLogChange.audit_log_change_value/0","type":"type"},{"doc":"","ref":"Crux.Structs.AuditLogChange.html#t:t/0","title":"Crux.Structs.AuditLogChange.t/0","type":"type"},{"doc":"Represents a Discord Audit Log Entry Object.","ref":"Crux.Structs.AuditLogEntry.html","title":"Crux.Structs.AuditLogEntry","type":"module"},{"doc":"Creates a Crux.Structs.AuditLogEntry.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.AuditLogEntry.html#create/1","title":"Crux.Structs.AuditLogEntry.create/1","type":"function"},{"doc":"Gets the event name from the action type id","ref":"Crux.Structs.AuditLogEntry.html#event_name/1","title":"Crux.Structs.AuditLogEntry.event_name/1","type":"function"},{"doc":"Returns a map of all audit log event names with their id","ref":"Crux.Structs.AuditLogEntry.html#events/0","title":"Crux.Structs.AuditLogEntry.events/0","type":"function"},{"doc":"Union type of audit log event name atoms.","ref":"Crux.Structs.AuditLogEntry.html#t:event_name/0","title":"Crux.Structs.AuditLogEntry.event_name/0","type":"type"},{"doc":"","ref":"Crux.Structs.AuditLogEntry.html#t:t/0","title":"Crux.Structs.AuditLogEntry.t/0","type":"type"},{"doc":"Represents a Discord Channel Object.List of where every property can be present:PropertyText (0)DM (1)Voice (2)Group (3)Category (4)News (5)application_idnononoyesnonobitratenonoyesnononoguild_idyesnoyesnoyesyesiconnononoyesnonoidyesyesyesyesyesyeslast_message_idyesyesnoyesnoyeslast_pin_timestampyesyesnoyesnoyesnameyesnoyesyesyesyesnsfwyesnonononoyesowner_idnononoyesnonoparent_idyesnoyesnonoyespermission_overwritesyesnoyesnoyesyespositionyesnoyesnoyesyesrate_limit_per_useryesnononononorecipientsnoyes&lt;br&gt;(One Element)noyesnonotopicyesnoyesnoyesyestype012345user_limitnonoyesnononoDifferences opposed to the Discord API Object::recipients is a MapSet of user ids","ref":"Crux.Structs.Channel.html","title":"Crux.Structs.Channel","type":"module"},{"doc":"Creates a Crux.Structs.Channel.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2","ref":"Crux.Structs.Channel.html#create/1","title":"Crux.Structs.Channel.create/1","type":"function"},{"doc":"Resolves the id of a Crux.Structs.Channel.t/0.Automatically invoked by Crux.Structs.resolve_id/2. iex&gt; %Crux.Structs.Message{channel_id: 222079895583457280} ...&gt; |&gt; Crux.Structs.Channel.resolve_id() 222079895583457280 iex&gt; %Crux.Structs.Channel{id: 222079895583457280} ...&gt; |&gt; Crux.Structs.Channel.resolve_id() 222079895583457280 iex&gt; 222079895583457280 ...&gt; |&gt; Crux.Structs.Channel.resolve_id() 222079895583457280 iex&gt; &quot;222079895583457280&quot; ...&gt; |&gt; Crux.Structs.Channel.resolve_id() 222079895583457280","ref":"Crux.Structs.Channel.html#resolve_id/1","title":"Crux.Structs.Channel.resolve_id/1","type":"function"},{"doc":"Resolves a position_resolvable/0 into a channel position.Examples iex&gt; %Crux.Structs.Channel{id: 222079895583457280, position: 5} ...&gt; |&gt; Crux.Structs.Channel.resolve_position() %{id: 222079895583457280, position: 5} iex&gt; {%Crux.Structs.Channel{id: 222079895583457280}, 5} ...&gt; |&gt; Crux.Structs.Channel.resolve_position() %{id: 222079895583457280, position: 5} iex&gt; {222079895583457280, 5} ...&gt; |&gt; Crux.Structs.Channel.resolve_position() %{id: 222079895583457280, position: 5} iex&gt; %{id: 222079895583457280, position: 5} ...&gt; |&gt; Crux.Structs.Channel.resolve_position() %{id: 222079895583457280, position: 5} iex&gt; %{channel: 222079895583457280, position: 5} ...&gt; |&gt; Crux.Structs.Channel.resolve_position() %{id: 222079895583457280, position: 5} iex&gt; {nil, 5} ...&gt; |&gt; Crux.Structs.Channel.resolve_position() nil","ref":"Crux.Structs.Channel.html#resolve_position/1","title":"Crux.Structs.Channel.resolve_position/1","type":"function"},{"doc":"Converts a Crux.Structs.Channel.t/0 into its discord mention format.Exampleiex&gt; %Crux.Structs.Channel{id: 316880197314019329} ...&gt; |&gt; Crux.Structs.Channel.to_mention() &quot;&lt;#316880197314019329&gt;&quot;","ref":"Crux.Structs.Channel.html#to_mention/1","title":"Crux.Structs.Channel.to_mention/1","type":"function"},{"doc":"All available types that can be resolved into a channel id.","ref":"Crux.Structs.Channel.html#t:id_resolvable/0","title":"Crux.Structs.Channel.id_resolvable/0","type":"type"},{"doc":"All available types that can be resolved into a channel position.","ref":"Crux.Structs.Channel.html#t:position_resolvable/0","title":"Crux.Structs.Channel.position_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Channel.html#t:t/0","title":"Crux.Structs.Channel.t/0","type":"type"},{"doc":"TypeIDDescriptionGUILD_TEXT0A text channel within a guild.DM1A direct text channel between two users.GUILD_VOICE2A voice channel withing a guild.GROUP_DM3A direct channel between multiple users.&lt;br&gt;Bots do not have access to those.GUILD_CATEGORY4An organizational category.GUILD_NEWS5A text channel users can follow and crosspost messages to.GUILD_STORE6A channel in which game developers can sell their game.&lt;br&gt;Bots can not interact with those. For more information see the Discord Developer Documentation.","ref":"Crux.Structs.Channel.html#t:type/0","title":"Crux.Structs.Channel.type/0","type":"type"},{"doc":"Represents a Discord Embed Object.Every property except type is optional, and thus may have default value.","ref":"Crux.Structs.Embed.html","title":"Crux.Structs.Embed","type":"module"},{"doc":"","ref":"Crux.Structs.Embed.html#t:t/0","title":"Crux.Structs.Embed.t/0","type":"type"},{"doc":"Represents a Discord Emoji Object.Differences opposed to the Discord API Object::user is just the user id","ref":"Crux.Structs.Emoji.html","title":"Crux.Structs.Emoji","type":"module"},{"doc":"Creates a Crux.Structs.Emoji.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Emoji.html#create/1","title":"Crux.Structs.Emoji.create/1","type":"function"},{"doc":"Resolves the id of a Crux.Structs.Emoji.t/0.Automatically invoked by Crux.Structs.resolve_id/2. iex&gt; %Crux.Structs.Emoji{id: 618731477143912448} ...&gt; |&gt; Crux.Structs.Emoji.resolve_id() 618731477143912448 iex&gt; %Crux.Structs.Reaction{emoji: %Crux.Structs.Emoji{id: 618731477143912448}} ...&gt; |&gt; Crux.Structs.Emoji.resolve_id() 618731477143912448 iex&gt; 618731477143912448 ...&gt; |&gt; Crux.Structs.Emoji.resolve_id() 618731477143912448 iex&gt; &quot;618731477143912448&quot; ...&gt; |&gt; Crux.Structs.Emoji.resolve_id() 618731477143912448","ref":"Crux.Structs.Emoji.html#resolve_id/1","title":"Crux.Structs.Emoji.resolve_id/1","type":"function"},{"doc":"Converts an Crux.Structs.Emoji.t/0, a Crux.Structs.Reaction.t/0, or a String.t/0 to its discord identifier format.This is automatically done if using a appropriate rest function.Examples# A custom emoji iex&gt; %Crux.Structs.Emoji{animated: false, id: 396521773216301056, name: &quot;blobwavereverse&quot;} ...&gt; |&gt; Crux.Structs.Emoji.to_identifier() &quot;blobwavereverse:396521773216301056&quot; # A custom animated emoji iex&gt; %Crux.Structs.Emoji{animated: true, id: 396521774466203659, name: &quot;ablobwavereverse&quot;} ...&gt; |&gt; Crux.Structs.Emoji.to_identifier() &quot;a:ablobwavereverse:396521774466203659&quot; # A regular emoji iex&gt; %Crux.Structs.Emoji{animated: false, id: nil, name: &quot;ðŸ‘‹&quot;} ...&gt; |&gt; Crux.Structs.Emoji.to_identifier() &quot;%F0%9F%91%8B&quot; # A reaction struct iex&gt; %Crux.Structs.Reaction{ ...&gt; emoji: %Crux.Structs.Emoji{animated: false, id: 356830260626456586, name: &quot;blobReach&quot;} ...&gt; } ...&gt; |&gt; Crux.Structs.Emoji.to_identifier() &quot;blobReach:356830260626456586&quot; # An already encoded identifier iex&gt; &quot;ðŸ‘€&quot; ...&gt; |&gt; URI.encode_www_form() ...&gt; |&gt; Crux.Structs.Emoji.to_identifier() &quot;%F0%9F%91%80&quot; # A custom emoji&#39;s identifier iex&gt; &quot;eyesRight:271412698267254784&quot; ...&gt; |&gt; Crux.Structs.Emoji.to_identifier() &quot;eyesRight:271412698267254784&quot;","ref":"Crux.Structs.Emoji.html#to_identifier/1","title":"Crux.Structs.Emoji.to_identifier/1","type":"function"},{"doc":"All available types that can be resolved into an emoji id.","ref":"Crux.Structs.Emoji.html#t:id_resolvable/0","title":"Crux.Structs.Emoji.id_resolvable/0","type":"type"},{"doc":"All available types that can be resolved into a discord emoji identifier.String.t() stands for an already encoded unicode emoji.","ref":"Crux.Structs.Emoji.html#t:identifier_resolvable/0","title":"Crux.Structs.Emoji.identifier_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Emoji.html#t:t/0","title":"Crux.Structs.Emoji.t/0","type":"type"},{"doc":"Represents a Discord Guild Object.Differences opposed to the Discord API Object::channels is a MapSet of channel ids:emojis is a MapSet of emoji ids:presences does not exists at all","ref":"Crux.Structs.Guild.html","title":"Crux.Structs.Guild","type":"module"},{"doc":"Creates a Crux.Structs.Guild.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Guild.html#create/1","title":"Crux.Structs.Guild.create/1","type":"function"},{"doc":"Resolves the id of a Crux.Structs.Guild.t/0.Automatically invoked by Crux.Structs.resolve_id/2. iex&gt; %Crux.Structs.Guild{id: 516569101267894284} ...&gt; |&gt; Crux.Structs.Guild.resolve_id() 516569101267894284 iex&gt; %Crux.Structs.Channel{guild_id: 516569101267894284} ...&gt; |&gt; Crux.Structs.Guild.resolve_id() 516569101267894284 iex&gt; %Crux.Structs.Message{guild_id: 516569101267894284} ...&gt; |&gt; Crux.Structs.Guild.resolve_id() 516569101267894284 iex&gt; 516569101267894284 ...&gt; |&gt; Crux.Structs.Guild.resolve_id() 516569101267894284 iex&gt; &quot;516569101267894284&quot; ...&gt; |&gt; Crux.Structs.Guild.resolve_id() 516569101267894284 # DMs iex&gt; %Crux.Structs.Channel{guild_id: nil} ...&gt; |&gt; Crux.Structs.Guild.resolve_id() nil iex&gt; %Crux.Structs.Message{guild_id: nil} ...&gt; |&gt; Crux.Structs.Guild.resolve_id() nil","ref":"Crux.Structs.Guild.html#resolve_id/1","title":"Crux.Structs.Guild.resolve_id/1","type":"function"},{"doc":"All available types that can be resolved into a guild id.","ref":"Crux.Structs.Guild.html#t:id_resolvable/0","title":"Crux.Structs.Guild.id_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Guild.html#t:t/0","title":"Crux.Structs.Guild.t/0","type":"type"},{"doc":"Represents a Discord Guild Preview Object.","ref":"Crux.Structs.GuildPreview.html","title":"Crux.Structs.GuildPreview","type":"module"},{"doc":"Creates a Crux.Structs.GuildPreview.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.GuildPreview.html#create/1","title":"Crux.Structs.GuildPreview.create/1","type":"function"},{"doc":"","ref":"Crux.Structs.GuildPreview.html#t:t/0","title":"Crux.Structs.GuildPreview.t/0","type":"type"},{"doc":"Represents a Discord Integration Object.","ref":"Crux.Structs.Integration.html","title":"Crux.Structs.Integration","type":"module"},{"doc":"Creates a Crux.Structs.Integration.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Integration.html#create/1","title":"Crux.Structs.Integration.create/1","type":"function"},{"doc":"All available types that can be resolved into an integration id.","ref":"Crux.Structs.Integration.html#t:id_resolvable/0","title":"Crux.Structs.Integration.id_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Integration.html#t:t/0","title":"Crux.Structs.Integration.t/0","type":"type"},{"doc":"Represents a Discord Invite ObjectList of what property can be present fetched with what function:PropertyRest.get_guild_vanity_invite/1Rest.get_invite/1Rest.create_channel_invite/1Rest.delete_invite/1Rest.get_channel_invites/1Rest.get_guild_invites/1codeyesyesyesyesguildnoif not group dmif not group dmif not group dmchannelnoyesyesyesinviternoyesyesyesusesyesnoyesnomax_usesnonoyesnomax_agenonoyesnotemporarynonoyesnocreated_atnonoyesnorevokednonononoapproximate_presence_countnoyesnonoapproximate_member_countnoyesnonoNotes::guild only has :verification_level, :features, :name, :splash, :id, and :icon.:channel only has :type, :id and :name.You can, if applicable, fetch the full structs from cache.","ref":"Crux.Structs.Invite.html","title":"Crux.Structs.Invite","type":"module"},{"doc":"Creates a Crux.Structs.Invite.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Invite.html#create/1","title":"Crux.Structs.Invite.create/1","type":"function"},{"doc":"","ref":"Crux.Structs.Invite.html#t:t/0","title":"Crux.Structs.Invite.t/0","type":"type"},{"doc":"Represents a Discord Guild Member Object.Differences opposed to the Discord API Object::user is just the user id","ref":"Crux.Structs.Member.html","title":"Crux.Structs.Member","type":"module"},{"doc":"Creates a Crux.Structs.Member.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Member.html#create/1","title":"Crux.Structs.Member.create/1","type":"function"},{"doc":"Resolves the id of a Crux.Structs.Member.t/0.Automatically invoked by Crux.Structs.resolve_id/2.iex&gt; %Crux.Structs.Member{user: 218348062828003328} ...&gt; |&gt; Crux.Structs.Member.resolve_id() 218348062828003328For more examples see Crux.Structs.User.resolve_id/1.","ref":"Crux.Structs.Member.html#resolve_id/1","title":"Crux.Structs.Member.resolve_id/1","type":"function"},{"doc":"Converts a Crux.Structs.Member.t/0 into its discord mention format.Examples# Without nickname iex&gt; %Crux.Structs.Member{user: 218348062828003328, nick: nil} ...&gt; |&gt; Crux.Structs.Member.to_mention() &quot;&lt;@218348062828003328&gt;&quot; # With nickname iex&gt; %Crux.Structs.Member{user: 218348062828003328, nick: &quot;weltraum&quot;} ...&gt; |&gt; Crux.Structs.Member.to_mention() &quot;&lt;@!218348062828003328&gt;&quot;","ref":"Crux.Structs.Member.html#to_mention/1","title":"Crux.Structs.Member.to_mention/1","type":"function"},{"doc":"All available types that can be resolved into a user id.","ref":"Crux.Structs.Member.html#t:id_resolvable/0","title":"Crux.Structs.Member.id_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Member.html#t:t/0","title":"Crux.Structs.Member.t/0","type":"type"},{"doc":"Represents a Discord Message Object. Differences opposed to the Discord API Object::mentions is a MapSet of user ids","ref":"Crux.Structs.Message.html","title":"Crux.Structs.Message","type":"module"},{"doc":"Creates a Crux.Structs.Message.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Message.html#create/1","title":"Crux.Structs.Message.create/1","type":"function"},{"doc":"All available types that can be resolved into a message id.","ref":"Crux.Structs.Message.html#t:id_resolvable/0","title":"Crux.Structs.Message.id_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Message.html#t:mention_channel/0","title":"Crux.Structs.Message.mention_channel/0","type":"type"},{"doc":"","ref":"Crux.Structs.Message.html#t:message_activity/0","title":"Crux.Structs.Message.message_activity/0","type":"type"},{"doc":"message_id is nil for the initial message sent when a user starts following a channel.guild_id is only nil for some messages during the initial rollout of this feature.","ref":"Crux.Structs.Message.html#t:message_reference/0","title":"Crux.Structs.Message.message_reference/0","type":"type"},{"doc":"","ref":"Crux.Structs.Message.html#t:t/0","title":"Crux.Structs.Message.t/0","type":"type"},{"doc":"Represents a Discord Overwrite Object.","ref":"Crux.Structs.Overwrite.html","title":"Crux.Structs.Overwrite","type":"module"},{"doc":"Creates a Crux.Structs.Overwrite.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Overwrite.html#create/1","title":"Crux.Structs.Overwrite.create/1","type":"function"},{"doc":"Resolves a target_resolvable/0 into an overwrite target.Note that an id or string of it returns :unknown as type.Examples iex&gt; %Crux.Structs.Overwrite{type: 1, id: 218348062828003328} ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {1, 218348062828003328} iex&gt; %Crux.Structs.Role{id: 376146940762783746} ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {0, 376146940762783746} iex&gt; %Crux.Structs.User{id: 218348062828003328} ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {1, 218348062828003328} iex&gt; %Crux.Structs.Member{user: 218348062828003328} ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {1, 218348062828003328} iex&gt; %Crux.Structs.Message{author: %Crux.Structs.User{id: 218348062828003328}} ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {1, 218348062828003328} iex&gt; %Crux.Structs.VoiceState{user_id: 218348062828003328} ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {1, 218348062828003328} iex&gt; 218348062828003328 ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {:unknown, 218348062828003328} iex&gt; &quot;218348062828003328&quot; ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {:unknown, 218348062828003328} iex&gt; nil ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() nil","ref":"Crux.Structs.Overwrite.html#resolve_target/1","title":"Crux.Structs.Overwrite.resolve_target/1","type":"function"},{"doc":"","ref":"Crux.Structs.Overwrite.html#t:t/0","title":"Crux.Structs.Overwrite.t/0","type":"type"},{"doc":"All available types that can be resolved into a target for a permission overwrite","ref":"Crux.Structs.Overwrite.html#t:target_resolvable/0","title":"Crux.Structs.Overwrite.target_resolvable/0","type":"type"},{"doc":"The target of an overwrite.0 role1 member","ref":"Crux.Structs.Overwrite.html#t:target_type/0","title":"Crux.Structs.Overwrite.target_type/0","type":"type"},{"doc":"Represents a Discord Presence Object.Differences opposed to the Discord API Object::user is just the user id","ref":"Crux.Structs.Presence.html","title":"Crux.Structs.Presence","type":"module"},{"doc":"Creates a Crux.Structs.Presence.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Presence.html#create/1","title":"Crux.Structs.Presence.create/1","type":"function"},{"doc":"Resolves the id of a Crux.Structs.Presence.t/0Automatically invoked by Crux.Structs.resolve_id/2iex&gt; %Crux.Structs.Presence{user: 218348062828003328} ...&gt; |&gt; Crux.Structs.Presence.resolve_id() 218348062828003328For more examples see Crux.Structs.User.resolve_id/1","ref":"Crux.Structs.Presence.html#resolve_id/1","title":"Crux.Structs.Presence.resolve_id/1","type":"function"},{"doc":"Represents an Activity Object.","ref":"Crux.Structs.Presence.html#t:activity/0","title":"Crux.Structs.Presence.activity/0","type":"type"},{"doc":"All available types that can be resolved into a user id.","ref":"Crux.Structs.Presence.html#t:id_resolvable/0","title":"Crux.Structs.Presence.id_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Presence.html#t:t/0","title":"Crux.Structs.Presence.t/0","type":"type"},{"doc":"Represents a Discord Reaction Object.","ref":"Crux.Structs.Reaction.html","title":"Crux.Structs.Reaction","type":"module"},{"doc":"Creates a Crux.Structs.Presence.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Reaction.html#create/1","title":"Crux.Structs.Reaction.create/1","type":"function"},{"doc":"Resolves the id of a Crux.Structs.Reaction.t/0.Automatically invoked by Crux.Structs.resolve_id/2. iex&gt; %Crux.Structs.Reaction{emoji: %Crux.Structs.Emoji{id: 618731477143912448}} ...&gt; |&gt; Crux.Structs.Reaction.resolve_id() 618731477143912448 iex&gt; %Crux.Structs.Emoji{id: 618731477143912448} ...&gt; |&gt; Crux.Structs.Reaction.resolve_id() 618731477143912448 iex&gt; 618731477143912448 ...&gt; |&gt; Crux.Structs.Reaction.resolve_id() 618731477143912448 iex&gt; &quot;618731477143912448&quot; ...&gt; |&gt; Crux.Structs.Reaction.resolve_id() 618731477143912448","ref":"Crux.Structs.Reaction.html#resolve_id/1","title":"Crux.Structs.Reaction.resolve_id/1","type":"function"},{"doc":"All available types that can be resolved into a reaction / emoji id.","ref":"Crux.Structs.Reaction.html#t:id_resolvable/0","title":"Crux.Structs.Reaction.id_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Reaction.html#t:t/0","title":"Crux.Structs.Reaction.t/0","type":"type"},{"doc":"Represents a Discord Role Object.","ref":"Crux.Structs.Role.html","title":"Crux.Structs.Role","type":"module"},{"doc":"Creates a Crux.Structs.Role.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Role.html#create/1","title":"Crux.Structs.Role.create/1","type":"function"},{"doc":"Resolves a position_resolvable/0 into a role position.Examples iex&gt; {%Crux.Structs.Role{id: 373405430589816834}, 5} ...&gt; |&gt; Crux.Structs.Role.resolve_position() %{id: 373405430589816834, position: 5} iex&gt; %Crux.Structs.Role{id: 373405430589816834, position: 5} ...&gt; |&gt; Crux.Structs.Role.resolve_position() %{id: 373405430589816834, position: 5} iex&gt; %{id: 373405430589816834, position: 5} ...&gt; |&gt; Crux.Structs.Role.resolve_position() %{id: 373405430589816834, position: 5} iex&gt; %{role: %Crux.Structs.Role{id: 373405430589816834}, position: 5} ...&gt; |&gt; Crux.Structs.Role.resolve_position() %{id: 373405430589816834, position: 5} iex&gt; {373405430589816834, 5} ...&gt; |&gt; Crux.Structs.Role.resolve_position() %{id: 373405430589816834, position: 5} iex&gt; {nil, 5} ...&gt; |&gt; Crux.Structs.Role.resolve_position() nil","ref":"Crux.Structs.Role.html#resolve_position/1","title":"Crux.Structs.Role.resolve_position/1","type":"function"},{"doc":"Converts a Crux.Structs.Role.t/0 into its discord mention format.Exampleiex&gt; %Crux.Structs.Role{id: 376146940762783746} ...&gt; |&gt; Crux.Structs.Role.to_mention() &quot;&lt;@&amp;376146940762783746&gt;&quot;","ref":"Crux.Structs.Role.html#to_mention/1","title":"Crux.Structs.Role.to_mention/1","type":"function"},{"doc":"All available types that can be resolved into a role id.","ref":"Crux.Structs.Role.html#t:id_resolvable/0","title":"Crux.Structs.Role.id_resolvable/0","type":"type"},{"doc":"All available types that can be resolved into a role position.","ref":"Crux.Structs.Role.html#t:position_resolvable/0","title":"Crux.Structs.Role.position_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Role.html#t:t/0","title":"Crux.Structs.Role.t/0","type":"type"},{"doc":"","ref":"Crux.Structs.Role.html#t:tags/0","title":"Crux.Structs.Role.tags/0","type":"type"},{"doc":"Represents a Discord Sticker Object.","ref":"Crux.Structs.Sticker.html","title":"Crux.Structs.Sticker","type":"module"},{"doc":"Callback implementation for Crux.Structs.create/1.","ref":"Crux.Structs.Sticker.html#create/1","title":"Crux.Structs.Sticker.create/1","type":"function"},{"doc":"","ref":"Crux.Structs.Sticker.html#t:t/0","title":"Crux.Structs.Sticker.t/0","type":"type"},{"doc":"Represents a Discord Template Object.","ref":"Crux.Structs.Template.html","title":"Crux.Structs.Template","type":"module"},{"doc":"Creates a Crux.Structs.Template.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Template.html#create/1","title":"Crux.Structs.Template.create/1","type":"function"},{"doc":"Resolve the code of a Crux.Structs.Template.t/0.Examplesiex&gt; %Crux.Structs.Template{code: &quot;example&quot;} ...&gt; |&gt; Crux.Structs.Template.resolve_code() &quot;example&quot; iex&gt; &quot;example&quot; ...&gt; |&gt; Crux.Structs.Template.resolve_code() &quot;example&quot;","ref":"Crux.Structs.Template.html#resolve_code/1","title":"Crux.Structs.Template.resolve_code/1","type":"function"},{"doc":"All available types that can be resolved into a template code.","ref":"Crux.Structs.Template.html#t:code_resolvable/0","title":"Crux.Structs.Template.code_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Template.html#t:t/0","title":"Crux.Structs.Template.t/0","type":"type"},{"doc":"Represents a Discord User Object","ref":"Crux.Structs.User.html","title":"Crux.Structs.User","type":"module"},{"doc":"Creates a Crux.Structs.User.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.User.html#create/1","title":"Crux.Structs.User.create/1","type":"function"},{"doc":"Resolves the id of a Crux.Structs.Guild.t/0.Automatically invoked by Crux.Structs.resolve_id/2. iex&gt; %Crux.Structs.User{id: 218348062828003328} ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328 iex&gt; %Crux.Structs.Member{user: 218348062828003328} ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328 iex&gt; %Crux.Structs.Message{author: %Crux.Structs.User{id: 218348062828003328}} ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328 iex&gt; %Crux.Structs.Presence{user: 218348062828003328} ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328 iex&gt; %Crux.Structs.VoiceState{user_id: 218348062828003328} ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328 iex&gt; 218348062828003328 ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328 iex&gt; &quot;218348062828003328&quot; ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328","ref":"Crux.Structs.User.html#resolve_id/1","title":"Crux.Structs.User.resolve_id/1","type":"function"},{"doc":"Converts a Crux.Structs.User.t/0 into its discord mention format.iex&gt; %Crux.Structs.User{id: 218348062828003328} ...&gt; |&gt; Crux.Structs.User.to_mention() &quot;&lt;@218348062828003328&gt;&quot;","ref":"Crux.Structs.User.html#to_mention/1","title":"Crux.Structs.User.to_mention/1","type":"function"},{"doc":"All available types that can be resolved into a user id.","ref":"Crux.Structs.User.html#t:id_resolvable/0","title":"Crux.Structs.User.id_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.User.html#t:t/0","title":"Crux.Structs.User.t/0","type":"type"},{"doc":"Represents a Discord Voice Region Object.","ref":"Crux.Structs.VoiceRegion.html","title":"Crux.Structs.VoiceRegion","type":"module"},{"doc":"","ref":"Crux.Structs.VoiceRegion.html#t:t/0","title":"Crux.Structs.VoiceRegion.t/0","type":"type"},{"doc":"Represents a Discord Voice State Object","ref":"Crux.Structs.VoiceState.html","title":"Crux.Structs.VoiceState","type":"module"},{"doc":"Creates a Crux.Structs.VoiceState.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.VoiceState.html#create/1","title":"Crux.Structs.VoiceState.create/1","type":"function"},{"doc":"Resolves the id of a Crux.Structs.VoiceState.t/0.Automatically invoked by Crux.Structs.resolve_id/2.iex&gt; %Crux.Structs.VoiceState{user_id: 218348062828003328} ...&gt; |&gt; Crux.Structs.VoiceState.resolve_id() 218348062828003328For more examples see Crux.Structs.User.resolve_id/1.","ref":"Crux.Structs.VoiceState.html#resolve_id/1","title":"Crux.Structs.VoiceState.resolve_id/1","type":"function"},{"doc":"All available types that can be resolved into a user id.","ref":"Crux.Structs.VoiceState.html#t:id_resolvable/0","title":"Crux.Structs.VoiceState.id_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.VoiceState.html#t:t/0","title":"Crux.Structs.VoiceState.t/0","type":"type"},{"doc":"Represents a Discord Webhook ObjectDifferences opposed to the Discord API Object::user is just the user id","ref":"Crux.Structs.Webhook.html","title":"Crux.Structs.Webhook","type":"module"},{"doc":"Creates a Crux.Structs.Webhook.t/0 struct from raw data.Automatically invoked by Crux.Structs.create/2.","ref":"Crux.Structs.Webhook.html#create/1","title":"Crux.Structs.Webhook.create/1","type":"function"},{"doc":"Converts a Crux.Structs.Webhook.t/0 into its discord mention format.Although the discord client does not autocomplete it for you, mentioning one still works.iex&gt; %Crux.Structs.Webhook{id: 218348062828003328} ...&gt; |&gt; Crux.Structs.Webhook.to_mention() &quot;&lt;@218348062828003328&gt;&quot;","ref":"Crux.Structs.Webhook.html#to_mention/1","title":"Crux.Structs.Webhook.to_mention/1","type":"function"},{"doc":"All available types that can be resolved into a webhook id.","ref":"Crux.Structs.Webhook.html#t:id_resolvable/0","title":"Crux.Structs.Webhook.id_resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Webhook.html#t:t/0","title":"Crux.Structs.Webhook.t/0","type":"type"},{"doc":"Custom non discord API struct helping with the usage of system channel flags.Discord is using flags in an &quot;inverted&quot; way here to allow all new types to be enabled by default. Therefore all set flags are actually disabled (as their names suggest).","ref":"Crux.Structs.Guild.SystemChannelFlags.html","title":"Crux.Structs.Guild.SystemChannelFlags","type":"module"},{"doc":"Add all set bits of to_add to base.","ref":"Crux.Structs.Guild.SystemChannelFlags.html#add/2","title":"Crux.Structs.Guild.SystemChannelFlags.add/2","type":"function"},{"doc":"Get an integer representing all available bits set.","ref":"Crux.Structs.Guild.SystemChannelFlags.html#all/0","title":"Crux.Structs.Guild.SystemChannelFlags.all/0","type":"function"},{"doc":"Get a map of name/0s and their corresponding bit values.","ref":"Crux.Structs.Guild.SystemChannelFlags.html#flags/0","title":"Crux.Structs.Guild.SystemChannelFlags.flags/0","type":"function"},{"doc":"Check whether the resolvable/0 you have has everything set you want.","ref":"Crux.Structs.Guild.SystemChannelFlags.html#has/2","title":"Crux.Structs.Guild.SystemChannelFlags.has/2","type":"function"},{"doc":"Return a t/0 of all bits you want but not have.","ref":"Crux.Structs.Guild.SystemChannelFlags.html#missing/2","title":"Crux.Structs.Guild.SystemChannelFlags.missing/2","type":"function"},{"doc":"Get a list of all available name/0s.","ref":"Crux.Structs.Guild.SystemChannelFlags.html#names/0","title":"Crux.Structs.Guild.SystemChannelFlags.names/0","type":"function"},{"doc":"Remove all set bits of to_remove from base.","ref":"Crux.Structs.Guild.SystemChannelFlags.html#remove/2","title":"Crux.Structs.Guild.SystemChannelFlags.remove/2","type":"function"},{"doc":"Resolve a resolvable/0 into a bitfield.","ref":"Crux.Structs.Guild.SystemChannelFlags.html#resolve/1","title":"Crux.Structs.Guild.SystemChannelFlags.resolve/1","type":"function"},{"doc":"Serialize a resolvable/0 into a list of set bit flag names.","ref":"Crux.Structs.Guild.SystemChannelFlags.html#to_list/1","title":"Crux.Structs.Guild.SystemChannelFlags.to_list/1","type":"function"},{"doc":"Serialize a resolvable/0 into a map representing bit flag names to whether they are set.","ref":"Crux.Structs.Guild.SystemChannelFlags.html#to_map/1","title":"Crux.Structs.Guild.SystemChannelFlags.to_map/1","type":"function"},{"doc":"Union type of all valid system channel flags.","ref":"Crux.Structs.Guild.SystemChannelFlags.html#t:name/0","title":"Crux.Structs.Guild.SystemChannelFlags.name/0","type":"type"},{"doc":"Raw bitfield that can be used as a resolvable/0.","ref":"Crux.Structs.Guild.SystemChannelFlags.html#t:raw/0","title":"Crux.Structs.Guild.SystemChannelFlags.raw/0","type":"type"},{"doc":"All valid types that can be directly resolved into a bitfield.","ref":"Crux.Structs.Guild.SystemChannelFlags.html#t:resolvable/0","title":"Crux.Structs.Guild.SystemChannelFlags.resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Guild.SystemChannelFlags.html#t:t/0","title":"Crux.Structs.Guild.SystemChannelFlags.t/0","type":"type"},{"doc":"Custom non discord API struct helping with the usage of message flags.Currently it's only possible to edit the suppress_embeds flag.","ref":"Crux.Structs.Message.Flags.html","title":"Crux.Structs.Message.Flags","type":"module"},{"doc":"Add all set bits of to_add to base.","ref":"Crux.Structs.Message.Flags.html#add/2","title":"Crux.Structs.Message.Flags.add/2","type":"function"},{"doc":"Get an integer representing all available bits set.","ref":"Crux.Structs.Message.Flags.html#all/0","title":"Crux.Structs.Message.Flags.all/0","type":"function"},{"doc":"Get a map of name/0s and their corresponding bit values.","ref":"Crux.Structs.Message.Flags.html#flags/0","title":"Crux.Structs.Message.Flags.flags/0","type":"function"},{"doc":"Check whether the resolvable/0 you have has everything set you want.","ref":"Crux.Structs.Message.Flags.html#has/2","title":"Crux.Structs.Message.Flags.has/2","type":"function"},{"doc":"Return a t/0 of all bits you want but not have.","ref":"Crux.Structs.Message.Flags.html#missing/2","title":"Crux.Structs.Message.Flags.missing/2","type":"function"},{"doc":"Get a list of all available name/0s.","ref":"Crux.Structs.Message.Flags.html#names/0","title":"Crux.Structs.Message.Flags.names/0","type":"function"},{"doc":"Remove all set bits of to_remove from base.","ref":"Crux.Structs.Message.Flags.html#remove/2","title":"Crux.Structs.Message.Flags.remove/2","type":"function"},{"doc":"Resolve a resolvable/0 into a bitfield.","ref":"Crux.Structs.Message.Flags.html#resolve/1","title":"Crux.Structs.Message.Flags.resolve/1","type":"function"},{"doc":"Serialize a resolvable/0 into a list of set bit flag names.","ref":"Crux.Structs.Message.Flags.html#to_list/1","title":"Crux.Structs.Message.Flags.to_list/1","type":"function"},{"doc":"Serialize a resolvable/0 into a map representing bit flag names to whether they are set.","ref":"Crux.Structs.Message.Flags.html#to_map/1","title":"Crux.Structs.Message.Flags.to_map/1","type":"function"},{"doc":"Union type of all valid message flags.","ref":"Crux.Structs.Message.Flags.html#t:name/0","title":"Crux.Structs.Message.Flags.name/0","type":"type"},{"doc":"Raw bitfield that can be used as a resolvable/0.","ref":"Crux.Structs.Message.Flags.html#t:raw/0","title":"Crux.Structs.Message.Flags.raw/0","type":"type"},{"doc":"All valid types that can be directly resolved into a bitfield.","ref":"Crux.Structs.Message.Flags.html#t:resolvable/0","title":"Crux.Structs.Message.Flags.resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Message.Flags.html#t:t/0","title":"Crux.Structs.Message.Flags.t/0","type":"type"},{"doc":"Custom non discord api struct to help with working with permissions. For more informations see Discord Docs.","ref":"Crux.Structs.Permissions.html","title":"Crux.Structs.Permissions","type":"module"},{"doc":"Add all set bits of to_add to base.","ref":"Crux.Structs.Permissions.html#add/2","title":"Crux.Structs.Permissions.add/2","type":"function"},{"doc":"Get an integer representing all available bits set.","ref":"Crux.Structs.Permissions.html#all/0","title":"Crux.Structs.Permissions.all/0","type":"function"},{"doc":"Resolves permissions for a user in a guild, optionally including channel permission overwrites.Raises when the member is not cached.The administrator flag or being owner implicitly does not grant permissions, see implicit/3.","ref":"Crux.Structs.Permissions.html#explicit/3","title":"Crux.Structs.Permissions.explicit/3","type":"function"},{"doc":"Get a map of name/0s and their corresponding bit values.","ref":"Crux.Structs.Permissions.html#flags/0","title":"Crux.Structs.Permissions.flags/0","type":"function"},{"doc":"Check whether the resolvable/0 you have has everything set you want.","ref":"Crux.Structs.Permissions.html#has/2","title":"Crux.Structs.Permissions.has/2","type":"function"},{"doc":"Resolves permissions for a user in a guild, optionally including channel permission overwrites.Raises when the member is not cached.The guild-wide administrator flag or being owner implicitly grants all permissions, see explicit/3.","ref":"Crux.Structs.Permissions.html#implicit/3","title":"Crux.Structs.Permissions.implicit/3","type":"function"},{"doc":"Return a t/0 of all bits you want but not have.","ref":"Crux.Structs.Permissions.html#missing/2","title":"Crux.Structs.Permissions.missing/2","type":"function"},{"doc":"Get a list of all available name/0s.","ref":"Crux.Structs.Permissions.html#names/0","title":"Crux.Structs.Permissions.names/0","type":"function"},{"doc":"Remove all set bits of to_remove from base.","ref":"Crux.Structs.Permissions.html#remove/2","title":"Crux.Structs.Permissions.remove/2","type":"function"},{"doc":"Resolve a resolvable/0 into a bitfield.","ref":"Crux.Structs.Permissions.html#resolve/1","title":"Crux.Structs.Permissions.resolve/1","type":"function"},{"doc":"Serialize a resolvable/0 into a list of set bit flag names.","ref":"Crux.Structs.Permissions.html#to_list/1","title":"Crux.Structs.Permissions.to_list/1","type":"function"},{"doc":"Serialize a resolvable/0 into a map representing bit flag names to whether they are set.","ref":"Crux.Structs.Permissions.html#to_map/1","title":"Crux.Structs.Permissions.to_map/1","type":"function"},{"doc":"Union type of all valid permission name atoms.","ref":"Crux.Structs.Permissions.html#t:name/0","title":"Crux.Structs.Permissions.name/0","type":"type"},{"doc":"Raw bitfield that can be used as a resolvable/0.","ref":"Crux.Structs.Permissions.html#t:raw/0","title":"Crux.Structs.Permissions.raw/0","type":"type"},{"doc":"All valid types that can be directly resolved into a bitfield.","ref":"Crux.Structs.Permissions.html#t:resolvable/0","title":"Crux.Structs.Permissions.resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Permissions.html#t:t/0","title":"Crux.Structs.Permissions.t/0","type":"type"},{"doc":"Custom non discord API struct helping with the usage of presence activity flags.","ref":"Crux.Structs.Presence.ActivityFlags.html","title":"Crux.Structs.Presence.ActivityFlags","type":"module"},{"doc":"Add all set bits of to_add to base.","ref":"Crux.Structs.Presence.ActivityFlags.html#add/2","title":"Crux.Structs.Presence.ActivityFlags.add/2","type":"function"},{"doc":"Get an integer representing all available bits set.","ref":"Crux.Structs.Presence.ActivityFlags.html#all/0","title":"Crux.Structs.Presence.ActivityFlags.all/0","type":"function"},{"doc":"Get a map of name/0s and their corresponding bit values.","ref":"Crux.Structs.Presence.ActivityFlags.html#flags/0","title":"Crux.Structs.Presence.ActivityFlags.flags/0","type":"function"},{"doc":"Check whether the resolvable/0 you have has everything set you want.","ref":"Crux.Structs.Presence.ActivityFlags.html#has/2","title":"Crux.Structs.Presence.ActivityFlags.has/2","type":"function"},{"doc":"Return a t/0 of all bits you want but not have.","ref":"Crux.Structs.Presence.ActivityFlags.html#missing/2","title":"Crux.Structs.Presence.ActivityFlags.missing/2","type":"function"},{"doc":"Get a list of all available name/0s.","ref":"Crux.Structs.Presence.ActivityFlags.html#names/0","title":"Crux.Structs.Presence.ActivityFlags.names/0","type":"function"},{"doc":"Remove all set bits of to_remove from base.","ref":"Crux.Structs.Presence.ActivityFlags.html#remove/2","title":"Crux.Structs.Presence.ActivityFlags.remove/2","type":"function"},{"doc":"Resolve a resolvable/0 into a bitfield.","ref":"Crux.Structs.Presence.ActivityFlags.html#resolve/1","title":"Crux.Structs.Presence.ActivityFlags.resolve/1","type":"function"},{"doc":"Serialize a resolvable/0 into a list of set bit flag names.","ref":"Crux.Structs.Presence.ActivityFlags.html#to_list/1","title":"Crux.Structs.Presence.ActivityFlags.to_list/1","type":"function"},{"doc":"Serialize a resolvable/0 into a map representing bit flag names to whether they are set.","ref":"Crux.Structs.Presence.ActivityFlags.html#to_map/1","title":"Crux.Structs.Presence.ActivityFlags.to_map/1","type":"function"},{"doc":"Union type of all valid presence activity flags.","ref":"Crux.Structs.Presence.ActivityFlags.html#t:name/0","title":"Crux.Structs.Presence.ActivityFlags.name/0","type":"type"},{"doc":"Raw bitfield that can be used as a resolvable/0.","ref":"Crux.Structs.Presence.ActivityFlags.html#t:raw/0","title":"Crux.Structs.Presence.ActivityFlags.raw/0","type":"type"},{"doc":"All valid types that can be directly resolved into a bitfield.","ref":"Crux.Structs.Presence.ActivityFlags.html#t:resolvable/0","title":"Crux.Structs.Presence.ActivityFlags.resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.Presence.ActivityFlags.html#t:t/0","title":"Crux.Structs.Presence.ActivityFlags.t/0","type":"type"},{"doc":"Custom non discord API struct helping with the usage of user flags.Discord is only providing a not documented subset of the available flags to bots.","ref":"Crux.Structs.User.Flags.html","title":"Crux.Structs.User.Flags","type":"module"},{"doc":"Add all set bits of to_add to base.","ref":"Crux.Structs.User.Flags.html#add/2","title":"Crux.Structs.User.Flags.add/2","type":"function"},{"doc":"Get an integer representing all available bits set.","ref":"Crux.Structs.User.Flags.html#all/0","title":"Crux.Structs.User.Flags.all/0","type":"function"},{"doc":"Get a map of name/0s and their corresponding bit values.","ref":"Crux.Structs.User.Flags.html#flags/0","title":"Crux.Structs.User.Flags.flags/0","type":"function"},{"doc":"Check whether the resolvable/0 you have has everything set you want.","ref":"Crux.Structs.User.Flags.html#has/2","title":"Crux.Structs.User.Flags.has/2","type":"function"},{"doc":"Return a t/0 of all bits you want but not have.","ref":"Crux.Structs.User.Flags.html#missing/2","title":"Crux.Structs.User.Flags.missing/2","type":"function"},{"doc":"Get a list of all available name/0s.","ref":"Crux.Structs.User.Flags.html#names/0","title":"Crux.Structs.User.Flags.names/0","type":"function"},{"doc":"Remove all set bits of to_remove from base.","ref":"Crux.Structs.User.Flags.html#remove/2","title":"Crux.Structs.User.Flags.remove/2","type":"function"},{"doc":"Resolve a resolvable/0 into a bitfield.","ref":"Crux.Structs.User.Flags.html#resolve/1","title":"Crux.Structs.User.Flags.resolve/1","type":"function"},{"doc":"Serialize a resolvable/0 into a list of set bit flag names.","ref":"Crux.Structs.User.Flags.html#to_list/1","title":"Crux.Structs.User.Flags.to_list/1","type":"function"},{"doc":"Serialize a resolvable/0 into a map representing bit flag names to whether they are set.","ref":"Crux.Structs.User.Flags.html#to_map/1","title":"Crux.Structs.User.Flags.to_map/1","type":"function"},{"doc":"Union type of all valid user flags.","ref":"Crux.Structs.User.Flags.html#t:name/0","title":"Crux.Structs.User.Flags.name/0","type":"type"},{"doc":"Raw bitfield that can be used as a resolvable/0.","ref":"Crux.Structs.User.Flags.html#t:raw/0","title":"Crux.Structs.User.Flags.raw/0","type":"type"},{"doc":"All valid types that can be directly resolved into a bitfield.","ref":"Crux.Structs.User.Flags.html#t:resolvable/0","title":"Crux.Structs.User.Flags.resolvable/0","type":"type"},{"doc":"","ref":"Crux.Structs.User.Flags.html#t:t/0","title":"Crux.Structs.User.Flags.t/0","type":"type"},{"doc":"Provides a unified function to create one or a list of structs, invoking their create/1 function if available.","ref":"Crux.Structs.html","title":"Crux.Structs","type":"behaviour"},{"doc":"Can be implemented by structs to transform the inital data.","ref":"Crux.Structs.html#c:create/1","title":"Crux.Structs.create/1","type":"callback"},{"doc":"Creates a struct or a list of structs invoking their create/1 function if available.Examples # A single member iex&gt; %{ ...&gt; &quot;nick&quot; =&gt; &quot;nick&quot;, ...&gt; &quot;user&quot; =&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;646a356e237350bf8b8dfde15667dfc4&quot;}, ...&gt; &quot;roles&quot; =&gt; [&quot;251158405832638465&quot;, &quot;373405430589816834&quot;], ...&gt; &quot;mute&quot; =&gt; false, ...&gt; &quot;deaf&quot; =&gt; false, ...&gt; &quot;joined_at&quot; =&gt; &quot;2016-11-02T00:51:21.342000+00:00&quot; ...&gt; } ...&gt; |&gt; Crux.Structs.create(Crux.Structs.Member) %Crux.Structs.Member{ nick: &quot;nick&quot;, user: 218348062828003328, roles: MapSet.new([251158405832638465, 373405430589816834]), mute: false, deaf: false, joined_at: &quot;2016-11-02T00:51:21.342000+00:00&quot;, guild_id: nil } # A single user iex&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;} ...&gt; |&gt; Crux.Structs.create(Crux.Structs.User) %Crux.Structs.User{username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: 218348062828003328, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;, bot: false, system: false} # Multiple users iex&gt; [ ...&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, ...&gt; %{&quot;username&quot; =&gt; &quot;Drahcirius&quot;, &quot;discriminator&quot; =&gt; &quot;1336&quot;, &quot;id&quot; =&gt; &quot;130175406673231873&quot;, &quot;avatar&quot; =&gt; &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;} ...&gt; ] ...&gt; |&gt; Crux.Structs.create(Crux.Structs.User) [ %Crux.Structs.User{username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: 218348062828003328, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;, bot: false, system: false}, %Crux.Structs.User{username: &quot;Drahcirius&quot;, discriminator: &quot;1336&quot;, id: 130175406673231873, avatar: &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;, bot: false, system: false} ] # Does not alter already structs iex&gt; Crux.Structs.create( ...&gt; %Crux.Structs.User{username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: 218348062828003328, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;, bot: false, system: false}, ...&gt; Crux.Structs.User ...&gt; ) %Crux.Structs.User{username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: 218348062828003328, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;, bot: false, system: false} # Fallback iex&gt; Crux.Structs.create(nil, nil) nil","ref":"Crux.Structs.html#create/2","title":"Crux.Structs.create/2","type":"function"},{"doc":"Can be implemented by structs to provide a mechanism to resolve their id.","ref":"Crux.Structs.html#c:resolve_id/1","title":"Crux.Structs.resolve_id/1","type":"callback"},{"doc":"Resolves the id of a struct invoking their resolve_id/1 function if available. # Struct of the concrete type iex&gt; %Crux.Structs.Webhook{id: 618733351624507394} ...&gt; |&gt; Crux.Structs.resolve_id(Crux.Structs.Webhook) 618733351624507394 # Already snowflake iex&gt; 222089067028807682 ...&gt; |&gt; Crux.Structs.resolve_id(Crux.Structs.Role) 222089067028807682 # Snowflake string iex&gt; &quot;222079895583457280&quot; ...&gt; |&gt; Crux.Structs.resolve_id(Crux.Structs.Channel) 222079895583457280 # nil iex&gt; nil ...&gt; |&gt; Crux.Structs.resolve_id(Crux.Structs.Guild) nil # Inexact type that is a resolvable iex&gt; %Crux.Structs.Member{user: 218348062828003328} ...&gt; |&gt; Crux.Structs.resolve_id(Crux.Structs.User) 218348062828003328 # Incorrect type iex&gt; %Crux.Structs.Role{id: 222079439876390922} ...&gt; |&gt; Crux.Structs.resolve_id(Crux.Structs.Emoji) nil","ref":"Crux.Structs.html#resolve_id/2","title":"Crux.Structs.resolve_id/2","type":"function"},{"doc":"Custom non discord api behaviour to help with bitfields of all kind.","ref":"Crux.Structs.BitField.html","title":"Crux.Structs.BitField","type":"behaviour"},{"doc":"Add all set bits of to_add to base.","ref":"Crux.Structs.BitField.html#c:add/2","title":"Crux.Structs.BitField.add/2","type":"callback"},{"doc":"Get a bitfield representing all available bits set.","ref":"Crux.Structs.BitField.html#c:all/0","title":"Crux.Structs.BitField.all/0","type":"callback"},{"doc":"Get a map of name/0s and their corresponding bit values.","ref":"Crux.Structs.BitField.html#c:flags/0","title":"Crux.Structs.BitField.flags/0","type":"callback"},{"doc":"Check whether the resolvable/0 you have has everything set you want.","ref":"Crux.Structs.BitField.html#c:has/2","title":"Crux.Structs.BitField.has/2","type":"callback"},{"doc":"Return a t/0 of all bits you want but not have.","ref":"Crux.Structs.BitField.html#c:missing/2","title":"Crux.Structs.BitField.missing/2","type":"callback"},{"doc":"Get a list of all available name/0s.","ref":"Crux.Structs.BitField.html#c:names/0","title":"Crux.Structs.BitField.names/0","type":"callback"},{"doc":"Remove all set bits of to_remove from base.","ref":"Crux.Structs.BitField.html#c:remove/2","title":"Crux.Structs.BitField.remove/2","type":"callback"},{"doc":"Resolve a resolvable/0 into a bitfield.","ref":"Crux.Structs.BitField.html#c:resolve/1","title":"Crux.Structs.BitField.resolve/1","type":"callback"},{"doc":"Serialize a resolvable/0 into a list of set bit flag names.","ref":"Crux.Structs.BitField.html#c:to_list/1","title":"Crux.Structs.BitField.to_list/1","type":"callback"},{"doc":"Serialize a resolvable/0 into a map, which is mapping all name/0s to whether they are set.","ref":"Crux.Structs.BitField.html#c:to_map/1","title":"Crux.Structs.BitField.to_map/1","type":"callback"},{"doc":"The name of a bit flag.","ref":"Crux.Structs.BitField.html#t:name/0","title":"Crux.Structs.BitField.name/0","type":"type"},{"doc":"All valid types that can be directly resolved into a bitfield.","ref":"Crux.Structs.BitField.html#t:resolvable/0","title":"Crux.Structs.BitField.resolvable/0","type":"type"},{"doc":"Represents a bitfield of a module implementing the Crux.Structs.BitField behaviour.","ref":"Crux.Structs.BitField.html#t:t/0","title":"Crux.Structs.BitField.t/0","type":"type"},{"doc":"Custom non discord api struct to help with working with Discord's snowflakes. For more information see Discord Docs.","ref":"Crux.Structs.Snowflake.html","title":"Crux.Structs.Snowflake","type":"module"},{"doc":"Constructs a t/0 from its Crux.Structs.Snowflake.Parts.t/0 or a keyword of its fields.iex&gt; %Crux.Structs.Snowflake.Parts{increment: 0, process_id: 0, timestamp: 1472128634889, worker_id: 1} ...&gt; |&gt; Crux.Structs.Snowflake.construct() 218348062828003328 iex&gt; Crux.Structs.Snowflake.construct(increment: 1, timestamp: 1451106635493) 130175406673231873 iex&gt; Crux.Structs.Snowflake.construct(timestamp: Crux.Structs.Snowflake.discord_epoch()) 0","ref":"Crux.Structs.Snowflake.html#construct/1","title":"Crux.Structs.Snowflake.construct/1","type":"function"},{"doc":"Deconstructs a t/0 to its Crux.Structs.Snowflake.Parts.t/0.iex&gt; Crux.Structs.Snowflake.deconstruct(218348062828003328) %Crux.Structs.Snowflake.Parts{ increment: 0, process_id: 0, timestamp: 1472128634889, worker_id: 1 }","ref":"Crux.Structs.Snowflake.html#deconstruct/1","title":"Crux.Structs.Snowflake.deconstruct/1","type":"function"},{"doc":"The discord epoch, the first second of 2015 or 1420070400000.iex&gt; Crux.Structs.Snowflake.discord_epoch() 1_420_070_400_000","ref":"Crux.Structs.Snowflake.html#discord_epoch/0","title":"Crux.Structs.Snowflake.discord_epoch/0","type":"function"},{"doc":"Deconstructs a t/0 to its Crux.Structs.Snowflake.Parts.t/0.","ref":"Crux.Structs.Snowflake.html#from_integer/1","title":"Crux.Structs.Snowflake.from_integer/1","type":"function"},{"doc":"Returns true if term is a t/0; otherwise returns false..","ref":"Crux.Structs.Snowflake.html#is_snowflake/1","title":"Crux.Structs.Snowflake.is_snowflake/1","type":"macro"},{"doc":"Converts a String.t/0 to a t/0 while allowing t/0 to pass through. Returns :error if the provided string is not a t/0. iex&gt; Crux.Structs.Snowflake.parse(&quot;invalid&quot;) :error iex&gt; Crux.Structs.Snowflake.parse(218348062828003328) 218348062828003328 # Fallbacks iex&gt; Crux.Structs.Snowflake.parse(&quot;218348062828003328&quot;) 218348062828003328","ref":"Crux.Structs.Snowflake.html#parse/1","title":"Crux.Structs.Snowflake.parse/1","type":"function"},{"doc":"Constructs a t/0 from its Crux.Structs.Snowflake.Parts.t/0.","ref":"Crux.Structs.Snowflake.html#to_integer/1","title":"Crux.Structs.Snowflake.to_integer/1","type":"function"},{"doc":"Converts a String.t/0 to a t/0 while allowing t/0 and nil to pass through. Raises an ArgumentError if the provided string is not an integer. iex&gt; Crux.Structs.Snowflake.to_snowflake(218348062828003328) 218348062828003328 # Fallbacks iex&gt; Crux.Structs.Snowflake.to_snowflake(&quot;218348062828003328&quot;) 218348062828003328 iex&gt; Crux.Structs.Snowflake.to_snowflake(nil) nil","ref":"Crux.Structs.Snowflake.html#to_snowflake/1","title":"Crux.Structs.Snowflake.to_snowflake/1","type":"function"},{"doc":"All valid types that can be resolved into a t/0.","ref":"Crux.Structs.Snowflake.html#t:resolvable/0","title":"Crux.Structs.Snowflake.resolvable/0","type":"type"},{"doc":"A discord snowflake, an unsigned 64 bit integer.","ref":"Crux.Structs.Snowflake.html#t:t/0","title":"Crux.Structs.Snowflake.t/0","type":"type"},{"doc":"Custom non discord api struct representing a deconstructed Discord snowflake.Structure of the PartsFieldBitsNumber of BitsDescriptionTimestamp63 to 2242 bitsMilliseconds since Discord Epoch (1420070400000)Internal Worker ID21 to 175 bitsInternal Process ID16 to 125 bitsIncrement11 to 012 bitsFor every ID that is generated on that process, this number is incremented For more information see Discord Docs.","ref":"Crux.Structs.Snowflake.Parts.html","title":"Crux.Structs.Snowflake.Parts","type":"module"},{"doc":"The parts of a Crux.Structs.Snowflake.t/0.","ref":"Crux.Structs.Snowflake.Parts.html#t:t/0","title":"Crux.Structs.Snowflake.Parts.t/0","type":"type"},{"doc":"Collection of util functions.","ref":"Crux.Structs.Util.html","title":"Crux.Structs.Util","type":"module"},{"doc":"Atomifies all keys in a passed list or map to avoid the mess of mixed string and atom keys the gateway sends.Examples# A map iex&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;} ...&gt; |&gt; Crux.Structs.Util.atomify() %{username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: &quot;218348062828003328&quot;, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;} # A list iex&gt; [ ...&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, ...&gt; %{&quot;username&quot; =&gt; &quot;Drahcirius&quot;, &quot;discriminator&quot; =&gt; &quot;1336&quot;, &quot;id&quot; =&gt; &quot;130175406673231873&quot;, &quot;avatar&quot; =&gt; &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;} ...&gt; ] ...&gt; |&gt; Crux.Structs.Util.atomify() [ %{username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: &quot;218348062828003328&quot;, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, %{username: &quot;Drahcirius&quot;, discriminator: &quot;1336&quot;, id: &quot;130175406673231873&quot;, avatar: &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;} ] # A nested map iex&gt; %{&quot;foo&quot; =&gt; &quot;bar&quot;, &quot;bar&quot; =&gt; %{&quot;baz&quot; =&gt; &quot;foo&quot;}} ...&gt; |&gt; Crux.Structs.Util.atomify() %{foo: &quot;bar&quot;, bar: %{baz: &quot;foo&quot;}} # A nested list iex&gt; [[%{&quot;foo&quot; =&gt; &quot;bar&quot;}], %{&quot;bar&quot; =&gt; &quot;foo&quot;}] ...&gt; |&gt; Crux.Structs.Util.atomify() [[%{foo: &quot;bar&quot;}], %{bar: &quot;foo&quot;}] # A struct iex&gt; %Crux.Structs.Overwrite{id: 448394877194076161, type: &quot;role&quot;, allow: 0, deny: 0} ...&gt; |&gt; Crux.Structs.Util.atomify() %{id: 448394877194076161, type: &quot;role&quot;, allow: 0, deny: 0}","ref":"Crux.Structs.Util.html#atomify/1","title":"Crux.Structs.Util.atomify/1","type":"function"},{"doc":"Returns a function converting a passed map to an id, using the specified key as key.Examples# Id is already a number iex&gt; Crux.Structs.Util.map_to_id(:foo).(%{foo: 123}) 123 # Id is a string iex&gt; Crux.Structs.Util.map_to_id(:foo).(%{foo: &quot;123&quot;}) 123 # No id exists iex&gt; Crux.Structs.Util.map_to_id(:foo).(%{&quot;foo&quot; =&gt; &quot;123&quot;}) nil # Example using `Enum.map/2` iex&gt; [ ...&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, ...&gt; %{&quot;username&quot; =&gt; &quot;Drahcirius&quot;, &quot;discriminator&quot; =&gt; &quot;1336&quot;, &quot;id&quot; =&gt; &quot;130175406673231873&quot;, &quot;avatar&quot; =&gt; &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;} ...&gt; ] ...&gt; |&gt; Enum.map(Crux.Structs.Util.map_to_id(&quot;id&quot;)) [218348062828003328, 130175406673231873]","ref":"Crux.Structs.Util.html#map_to_id/1","title":"Crux.Structs.Util.map_to_id/1","type":"function"},{"doc":"Converts a list of raw api data to structs keyed under the passed key.Examplesiex&gt; [ ...&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, ...&gt; %{&quot;username&quot; =&gt; &quot;Drahcirius&quot;, &quot;discriminator&quot; =&gt; &quot;1336&quot;, &quot;id&quot; =&gt; &quot;130175406673231873&quot;, &quot;avatar&quot; =&gt; &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;} ...&gt; ] ...&gt; |&gt; Crux.Structs.Util.raw_data_to_map(Crux.Structs.User) %{ 130175406673231873 =&gt; %Crux.Structs.User{ username: &quot;Drahcirius&quot;, discriminator: &quot;1336&quot;, id: 130175406673231873, avatar: &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;, bot: false, system: false }, 218348062828003328 =&gt; %Crux.Structs.User{ username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: 218348062828003328, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;, bot: false, system: false } } iex&gt; [ ...&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, ...&gt; %{&quot;username&quot; =&gt; &quot;Drahcirius&quot;, &quot;discriminator&quot; =&gt; &quot;1336&quot;, &quot;id&quot; =&gt; &quot;130175406673231873&quot;, &quot;avatar&quot; =&gt; &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;} ...&gt; ] ...&gt; |&gt; Crux.Structs.Util.raw_data_to_map(Crux.Structs.User, :username) %{ &quot;Drahcirius&quot; =&gt; %Crux.Structs.User{ username: &quot;Drahcirius&quot;, discriminator: &quot;1336&quot;, id: 130175406673231873, avatar: &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;, bot: false, system: false }, &quot;space&quot; =&gt; %Crux.Structs.User{ username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: 218348062828003328, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;, bot: false, system: false } }","ref":"Crux.Structs.Util.html#raw_data_to_map/3","title":"Crux.Structs.Util.raw_data_to_map/3","type":"function"}]